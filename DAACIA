Questions:

1. The shortest path from source node to all possible nodes with PRIMS, KRISKALS, DIJKSTRA'S algorithms using C/C++/Python/Java. Give a justification for the choice of the programming language.

2. Give a note of comparison regarding the performance of the algorithms. If you feel that any of the algorithms fail to find any of the required paths, give justification for the same.

NOTES:

Prim's and Kruskal's Algorithm:

 Both prim's and Kruskal's algorithm fails when the graph is directed.
 
  1) Prim’s algorithm assumes that all vertices are connected. But in a directed graph, every node is not reachable from every other node. So, Prim’s algorithm fails due to this reason.
  
  2) In Kruskal’s algorithm, In each step, it is checked that if the edges form a cycle with the spanning-tree formed so far. But Kruskal’s algorithm fails to detect the cycles in a directed graph as there are cases when there is no cycle between the vertices but Kruskal’s Algorithm assumes it to cycle and don’t take consider some edges due to which Kruskal’s Algorithm fails for directed graph.
  
  Dijkstra's Algorithm:
  
  - While Dijkstra's algorithm does work, it only seems to be successful in certain cases. I also noticed that dijkstra's failed in every instance where a negative number was used.
  -Dijkstra follows a Greedy Approach, so once a node is marked as visited it cannot be reconsidered even if there is another path with less cost or distance. This issue arises only if there exists a negative weight or edge in the graph.
Hence, this algorithm fails to find the minimum distance in case of negative weights.

To find the solution to a directed graph with negative weigths, i started researching the Bellman Ford model. This model works similar to the dijkstra's algorithm except it takes into account negative weightage and works for directed graphs as well.

CODE:
Language: Python
I used python for the aforementioned questions because it is easier for me to come up with algorithms and write code.
 
 
 def edge(a, b, c):
	graph.append([a, b, c])

def printMatrix(distance):
	print("Vertex Distance from Source")
	for i in range(V):
		print("{0}\t\t{1}".format(i, distance[i]))

def BF(Source):
	distance = [float("Inf")] * V
	distance[Source] = 0

	for _ in range(V - 1):
		for a, b, c in graph:
			if distance[a] != float("Inf") and distance[a] + c < distance[b]:
				distance[b] = distance[a] + c

	for a, b, c in graph:
		if distance[a] != float("Inf") and distance[a] + c < distance[b]:
			print("Graph has -ve weight cycle")
			return

	printMatrix(distance)

if __name__ == '__main__':
    V=6 
    graph=[]
    edge(0, 1, 10)
    edge(0, 5, 8)
    edge(1, 3, 2)
    edge(2, 1, 1)
    edge(3, 2, -2)
    edge(4, 1, -4)
    edge(4, 3, -1)
    edge(5, 4, 1)

    BF(0)
